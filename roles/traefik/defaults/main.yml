---
# docker image
dapp_traefik_docker_image: "docker.io/traefik"

# traefik docker environment variables
dapp_traefik_docker_environment: |
  {{ dapp_common_docker_environment }}

# dapp_traefik_docker_external_links:
#   - container1
#   - container2

# traefik docker healthcheck variables
dapp_traefik_docker_healthcheck: |
  {{ dapp_common_docker_healthcheck }}

# dapp_traefik_docker_mem_limit: 512M

# default trafik ports
dapp_traefik_ports:
  - 80:80
  - 443:443

# content of traefik.env file
dapp_traefik_env_file: |
  # traefik static configuration through envvars
  TRAEFIK_API=true
  TRAEFIK_API_DASHBOARD=true
  TRAEFIK_API_INSECURE=false
  TRAEFIK_API_DEBUG=false
  # Log level set to traefik logs.
  # DEBUG, PANIC, FATAL, ERROR, WARN, and INFO
  TRAEFIK_LOG_LEVEL=WARN
  TRAEFIK_PROVIDERS_DOCKER=true
  TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
  # EntryPoints are the network entry points into Traefik.
  TRAEFIK_ENTRYPOINTS_http=true
  TRAEFIK_ENTRYPOINTS_http_ADDRESS=:80
  TRAEFIK_ENTRYPOINTS_https=true
  TRAEFIK_ENTRYPOINTS_https_ADDRESS=:443
  TRAEFIK_ENTRYPOINTS_ldap=true
  TRAEFIK_ENTRYPOINTS_ldap_ADDRESS=:389
  TRAEFIK_ENTRYPOINTS_ldaps=true
  TRAEFIK_ENTRYPOINTS_ldaps_ADDRESS=:636
  {% if dapp_common_traefik_file_provider is defined %}
  # file provider directory
  TRAEFIK_PROVIDERS_FILE_DIRECTORY=/etc/traefik
  {% endif %}
  {% if dapp_common_traefik_certresolver != "none" %}
  # cert resolver settings
  {{ dapp_traefik_certresolver_settings }}
  {% endif %}

# traefik certificat, insert your certificate here.
dapp_traefik_certificate:
  crt: ""
  key: ""

# no settings required with dapp_common_traefik_certresolver: none
# defined in docker_apps/roles/common/defaults/main.yml
dapp_traefik_certresolver_settings: ""

# An example of how to setup traefik with a let's encrypt providers. https://go-acme.github.io/lego/dns/
# 'dapp_traefik_certresolver_settings' will be append to the traefik.env template
# dapp_common_traefik_certresolver: mydomain
# dapp_traefik_certresolver_settings: |
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain=true
#   # caServer - staging
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_CASERVER=https://acme-staging-v02.api.letsencrypt.org/directory
#   # caServer - production
#   #TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_CASERVER=https://acme-v02.api.letsencrypt.org/directory
# 
#   # ACME certificates can be stored in a JSON file that needs to have a 600 file mode.
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_STORAGE=/data/acme.json
#   # Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_DNSCHALLENGE=true
#   # dns challenge provider
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_DNSCHALLENGE_PROVIDER=easydns
#   # Use custom DNS servers to resolve the FQDN authority.
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_DNSCHALLENGE_RESOLVERS=motorhead.easydns.org,rush.easydns.com,nirvana.easydns.net
#   # the provider verifies the TXT record before letting ACME verify.
#   # You can delay this operation by specifying a delay (in seconds) with delayBeforeCheck.
#   # This option is useful when internal networks block external DNS queries
#   #TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_DNSCHALLENGE_DELAYBEFORECHECK=10
#   # mail address used for registration. pour changer: `certbot update_account --email new@email.org`
#   TRAEFIK_CERTIFICATESRESOLVERS_mydomain_ACME_EMAIL=me@example.com
# 
#   # easydns stuff
#   EASYDNS_TOKEN={{ easydns_mydomain_api_token }}
#   EASYDNS_KEY={{ easydns_mydomain_api_key }}
#   # Additional Configuration - https://go-acme.github.io/lego/dns/easydns/
#   # Time between DNS propagation check
#   EASYDNS_POLLING_INTERVAL=60
#   # Maximum waiting time for DNS propagation
#   EASYDNS_PROPAGATION_TIMEOUT=3600
#   # The TTL of the TXT record used for the DNS challenge
#   EASYDNS_TTL=3601

# If you need additional traefik labels, you can add them here.
# dapp_traefik_custom_labels: ""
