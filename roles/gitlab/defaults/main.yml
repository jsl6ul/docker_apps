---
# gitlab docker environment variables
dapp_gitlab_docker_environment: |
  {{ dapp_common_docker_environment }}
  GITLAB_OMNIBUS_CONFIG: |
    {{ dapp_gitlab_omnibus_config|indent(2) }}
    {{ (dapp_gitlab_omnibus_config_ldap|default(""))|indent(2) }}

# gitlab runner docker environment variables
dapp_gitlab_runner_docker_environment: |
  {{ dapp_common_docker_environment }}

# docker images
dapp_gitlab_docker_image: "docker.io/gitlab/gitlab-ce"
dapp_gitlab_runner_docker_image: "docker.io/gitlab/gitlab-runner"

# gitlab server address
dapp_gitlab_traefik_address: "gitlab.{{ dapp_common_domain }}"

dapp_gitlab_mem_limit: 4096M
dapp_gitlab_runner_mem_limit: 3072M

dapp_gitlab_cpus: 2
dapp_gitlab_runner_cpus: 2

# gitlab external ssh port
dapp_gitlab_shell_ssh_port: 2222
dapp_gitlab_ports:
  - "{{ dapp_gitlab_shell_ssh_port }}:22"

# https://docs.gitlab.com/omnibus/settings/logs.html
# https://docs.gitlab.com/ee/administration/logs/index.html
dapp_gitlab_log_level: ERROR

# Configuration settings using the Omnibus package
# https://docs.gitlab.com/omnibus/settings/configuration.html
# https://docs.gitlab.com/omnibus/settings/memory_constrained_envs.html
dapp_gitlab_omnibus_config: |
  external_url 'https://{{ dapp_gitlab_traefik_address }}'
  gitlab_rails['gitlab_shell_ssh_port'] = {{ dapp_gitlab_shell_ssh_port }}
  gitlab_shell['log_level'] = '{{ dapp_gitlab_log_level }}'
  nginx['listen_https'] = false
  nginx['listen_port'] = 80
  prometheus_monitoring['enable'] = false
  puma['worker_processes'] = 0
  registry['log_level'] = '{{ dapp_gitlab_log_level }}'
  sidekiq['max_concurrency'] = 10
  sidekiq['metrics_enabled'] = false
  gitlab_rails['env'] = {
    "GITLAB_LOG_LEVEL" => "{{ dapp_gitlab_log_level }}",
    "DEBUG" => "{{ dapp_gitlab_log_level }}",
    "VERBOSE" => "{{ dapp_gitlab_log_level }}",
    "EXPORT_DEBUG" => "{{ dapp_gitlab_log_level }}",
    "IMPORT_DEBUG" => "{{ dapp_gitlab_log_level }}",
    "QA_LOG_LEVEL" => "{{ dapp_gitlab_log_level }}",
    "GRPC_LOG_LEVEL" => "{{ dapp_gitlab_log_level }}",
    "LLM_DEBUG" => "{{ dapp_gitlab_log_level }}",
    "MALLOC_CONF" => "dirty_decay_ms:1000,muzzy_decay_ms:1000"
  }
  gitaly['configuration'] = {
    concurrency: [
      {
        'rpc' => "/gitaly.SmartHTTPService/PostReceivePack",
        'max_per_repo' => 3,
      }, {
        'rpc' => "/gitaly.SSHService/SSHUploadPack",
        'max_per_repo' => 3,
      },
    ],
    logging: {
      level: "{{ dapp_gitlab_log_level }}"
    },
  }
  gitaly['env'] = {
    'GITALY_COMMAND_SPAWN_MAX_PARALLEL' => '2',
    'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
  }

# GitLab integrates with LDAP to support user authentication.
# https://docs.gitlab.com/ee/administration/auth/ldap/
# dapp_gitlab_omnibus_config_ldap: |
#   gitlab_rails['ldap_enabled'] = true
#   gitlab_rails['ldap_servers'] = {
#     'main' => {
#       'label' => 'LDAP',
#       'host' =>  'ldap.mydomain.com',
#       'port' => 636,
#       'uid' => 'sAMAccountName',
#       'bind_dn' => 'CN=Gitlab,OU=Users,DC=domain,DC=com',
#       'password' => '<bind_user_password>',
#       'encryption' => 'simple_tls',
#       'verify_certificates' => true,
#       'timeout' => 10,
#       'active_directory' => false,
#       'user_filter' => '(employeeType=developer)',
#       'base' => 'dc=example,dc=com',
#       'lowercase_usernames' => 'false',
#       'retry_empty_result_with_codes' => [80],
#       'allow_username_or_email_login' => false,
#       'block_auto_created_users' => false
#     }
#   }

# Define a 'dapp_gitlab_runner_dockerfile' to run a gitlab-runner container.
# dapp_gitlab_runner_dockerfile: |
#   # Dockerfile to build the gitlab runner container
#   FROM debian:12
#   ENV DEBIAN_FRONTEND=noninteractive
#   RUN <<EOF
#   /usr/bin/apt-get update
#   /usr/bin/apt-get -y upgrade
#   /usr/bin/apt-get -y dist-upgrade
#   /usr/bin/apt-get -y install \
#     --no-install-recommends --no-install-suggests \
#     ansible ansible-lint coreutils curl git jq openssh-client \
#     python3 python3-dev tar wget python3-dnspython python3-netaddr python3-pip
#   /usr/bin/apt-get clean
#   mkdir -p -m 0700 ~/.ssh
#   echo "StrictHostKeyChecking no\n" > ~/.ssh/config
#   EOF
